// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_tx_adding_pilot_Pipeline_symb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        temp1_re397_dout,
        temp1_re397_empty_n,
        temp1_re397_read,
        temp1_im398_dout,
        temp1_im398_empty_n,
        temp1_im398_read,
        symb1_M_real_V_address0,
        symb1_M_real_V_ce0,
        symb1_M_real_V_we0,
        symb1_M_real_V_d0,
        symb1_M_imag_V_address0,
        symb1_M_imag_V_ce0,
        symb1_M_imag_V_we0,
        symb1_M_imag_V_d0,
        symb2_M_real_V_address0,
        symb2_M_real_V_ce0,
        symb2_M_real_V_we0,
        symb2_M_real_V_d0,
        symb2_M_imag_V_address0,
        symb2_M_imag_V_ce0,
        symb2_M_imag_V_we0,
        symb2_M_imag_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] temp1_re397_dout;
input   temp1_re397_empty_n;
output   temp1_re397_read;
input  [15:0] temp1_im398_dout;
input   temp1_im398_empty_n;
output   temp1_im398_read;
output  [9:0] symb1_M_real_V_address0;
output   symb1_M_real_V_ce0;
output   symb1_M_real_V_we0;
output  [15:0] symb1_M_real_V_d0;
output  [9:0] symb1_M_imag_V_address0;
output   symb1_M_imag_V_ce0;
output   symb1_M_imag_V_we0;
output  [15:0] symb1_M_imag_V_d0;
output  [9:0] symb2_M_real_V_address0;
output   symb2_M_real_V_ce0;
output   symb2_M_real_V_we0;
output  [15:0] symb2_M_real_V_d0;
output  [9:0] symb2_M_imag_V_address0;
output   symb2_M_imag_V_ce0;
output   symb2_M_imag_V_we0;
output  [15:0] symb2_M_imag_V_d0;

reg ap_idle;
reg temp1_re397_read;
reg temp1_im398_read;
reg symb1_M_real_V_ce0;
reg symb1_M_real_V_we0;
reg symb1_M_imag_V_ce0;
reg symb1_M_imag_V_we0;
reg symb2_M_real_V_ce0;
reg symb2_M_real_V_we0;
reg symb2_M_imag_V_ce0;
reg symb2_M_imag_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] tmp_s_nbreadreq_fu_56_p3;
wire   [0:0] tmp_2_nbreadreq_fu_64_p3;
reg    ap_predicate_op26_read_state2;
reg    ap_predicate_op27_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln74_fu_148_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    temp1_re397_blk_n;
wire    ap_block_pp0_stage0;
reg    temp1_im398_blk_n;
reg   [10:0] i_9_reg_197;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln84_fu_184_p1;
wire   [0:0] icmp_ln78_fu_173_p2;
wire   [63:0] i_10_cast11_fu_165_p1;
reg   [10:0] i_fu_52;
wire   [10:0] add_ln74_fu_154_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_i_9;
wire   [9:0] empty_61_fu_170_p1;
wire   [9:0] add_ln84_fu_178_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_tx_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln74_fu_148_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_52 <= add_ln74_fu_154_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_9_reg_197 <= ap_sig_allocacmp_i_9;
    end
end

always @ (*) begin
    if (((icmp_ln74_fu_148_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_9 = 11'd0;
    end else begin
        ap_sig_allocacmp_i_9 = i_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        symb1_M_imag_V_ce0 = 1'b1;
    end else begin
        symb1_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_nbreadreq_fu_64_p3 == 1'd1) & (tmp_s_nbreadreq_fu_56_p3 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln78_fu_173_p2 == 1'd1))) begin
        symb1_M_imag_V_we0 = 1'b1;
    end else begin
        symb1_M_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        symb1_M_real_V_ce0 = 1'b1;
    end else begin
        symb1_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_nbreadreq_fu_64_p3 == 1'd1) & (tmp_s_nbreadreq_fu_56_p3 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln78_fu_173_p2 == 1'd1))) begin
        symb1_M_real_V_we0 = 1'b1;
    end else begin
        symb1_M_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        symb2_M_imag_V_ce0 = 1'b1;
    end else begin
        symb2_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_nbreadreq_fu_64_p3 == 1'd1) & (tmp_s_nbreadreq_fu_56_p3 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln78_fu_173_p2 == 1'd0))) begin
        symb2_M_imag_V_we0 = 1'b1;
    end else begin
        symb2_M_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        symb2_M_real_V_ce0 = 1'b1;
    end else begin
        symb2_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_nbreadreq_fu_64_p3 == 1'd1) & (tmp_s_nbreadreq_fu_56_p3 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln78_fu_173_p2 == 1'd0))) begin
        symb2_M_real_V_we0 = 1'b1;
    end else begin
        symb2_M_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op27_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp1_im398_blk_n = temp1_im398_empty_n;
    end else begin
        temp1_im398_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op27_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp1_im398_read = 1'b1;
    end else begin
        temp1_im398_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op26_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp1_re397_blk_n = temp1_re397_empty_n;
    end else begin
        temp1_re397_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op26_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp1_re397_read = 1'b1;
    end else begin
        temp1_re397_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln74_fu_154_p2 = (ap_sig_allocacmp_i_9 + 11'd1);

assign add_ln84_fu_178_p2 = (empty_61_fu_170_p1 + 10'd424);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op27_read_state2 == 1'b1) & (temp1_im398_empty_n == 1'b0)) | ((ap_predicate_op26_read_state2 == 1'b1) & (temp1_re397_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op27_read_state2 == 1'b1) & (temp1_im398_empty_n == 1'b0)) | ((ap_predicate_op26_read_state2 == 1'b1) & (temp1_re397_empty_n == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ap_predicate_op27_read_state2 == 1'b1) & (temp1_im398_empty_n == 1'b0)) | ((ap_predicate_op26_read_state2 == 1'b1) & (temp1_re397_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op26_read_state2 = ((tmp_2_nbreadreq_fu_64_p3 == 1'd1) & (tmp_s_nbreadreq_fu_56_p3 == 1'd1));
end

always @ (*) begin
    ap_predicate_op27_read_state2 = ((tmp_2_nbreadreq_fu_64_p3 == 1'd1) & (tmp_s_nbreadreq_fu_56_p3 == 1'd1));
end

assign empty_61_fu_170_p1 = i_9_reg_197[9:0];

assign i_10_cast11_fu_165_p1 = i_9_reg_197;

assign icmp_ln74_fu_148_p2 = ((ap_sig_allocacmp_i_9 == 11'd1200) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_173_p2 = ((i_9_reg_197 < 11'd600) ? 1'b1 : 1'b0);

assign symb1_M_imag_V_address0 = i_10_cast11_fu_165_p1;

assign symb1_M_imag_V_d0 = temp1_im398_dout;

assign symb1_M_real_V_address0 = i_10_cast11_fu_165_p1;

assign symb1_M_real_V_d0 = temp1_re397_dout;

assign symb2_M_imag_V_address0 = zext_ln84_fu_184_p1;

assign symb2_M_imag_V_d0 = temp1_im398_dout;

assign symb2_M_real_V_address0 = zext_ln84_fu_184_p1;

assign symb2_M_real_V_d0 = temp1_re397_dout;

assign tmp_2_nbreadreq_fu_64_p3 = temp1_im398_empty_n;

assign tmp_s_nbreadreq_fu_56_p3 = temp1_re397_empty_n;

assign zext_ln84_fu_184_p1 = add_ln84_fu_178_p2;

endmodule //top_tx_adding_pilot_Pipeline_symb
