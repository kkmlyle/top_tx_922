// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_tx_qam64 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        temp1_re397_din,
        temp1_re397_full_n,
        temp1_re397_write,
        temp1_im398_din,
        temp1_im398_full_n,
        temp1_im398_write,
        ap_ce,
        input1,
        input2,
        input3,
        input4,
        input5,
        input6,
        temp1_re397_blk_n,
        temp1_im398_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] temp1_re397_din;
input   temp1_re397_full_n;
output   temp1_re397_write;
output  [15:0] temp1_im398_din;
input   temp1_im398_full_n;
output   temp1_im398_write;
input   ap_ce;
input  [0:0] input1;
input  [0:0] input2;
input  [0:0] input3;
input  [0:0] input4;
input  [0:0] input5;
input  [0:0] input6;
output   temp1_re397_blk_n;
output   temp1_im398_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg temp1_re397_write;
reg temp1_im398_write;
reg temp1_re397_blk_n;
reg temp1_im398_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
reg    ap_block_state23_pp0_stage0_iter22;
reg    ap_block_pp0_stage0_subdone;
wire   [2:0] mapping_address0;
reg    mapping_ce0;
wire   [3:0] mapping_q0;
wire   [2:0] mapping_address1;
reg    mapping_ce1;
wire   [3:0] mapping_q1;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] grp_fu_161_p1;
reg   [63:0] conv_reg_715;
wire   [63:0] grp_fu_164_p1;
reg   [63:0] conv1_reg_720;
wire   [63:0] grp_fu_151_p2;
reg   [63:0] d_reg_725;
wire   [63:0] grp_fu_156_p2;
reg   [63:0] d_2_reg_730;
wire   [63:0] zext_ln70_fu_187_p1;
wire   [63:0] zext_ln71_fu_192_p1;
reg    ap_block_pp0_stage0_01001;
wire  signed [31:0] grp_fu_161_p0;
wire  signed [31:0] grp_fu_164_p0;
wire   [2:0] index_i_fu_167_p4;
wire   [2:0] index_q_fu_177_p4;
wire   [63:0] ireg_fu_207_p1;
wire   [10:0] exp_tmp_fu_222_p4;
wire   [51:0] trunc_ln554_fu_236_p1;
wire   [52:0] p_Result_4_fu_240_p3;
wire   [53:0] zext_ln558_fu_248_p1;
wire   [0:0] p_Result_s_fu_214_p3;
wire   [53:0] man_V_6_fu_252_p2;
wire   [62:0] trunc_ln544_fu_210_p1;
wire   [11:0] zext_ln455_fu_232_p1;
wire   [11:0] F2_fu_272_p2;
wire   [0:0] icmp_ln570_fu_278_p2;
wire   [11:0] add_ln570_fu_284_p2;
wire   [11:0] sub_ln570_fu_290_p2;
wire  signed [11:0] sh_amt_fu_296_p3;
wire   [53:0] man_V_7_fu_258_p3;
wire  signed [31:0] sext_ln570_fu_304_p1;
wire   [53:0] zext_ln575_fu_324_p1;
wire   [53:0] ashr_ln575_fu_328_p2;
wire   [0:0] tmp_fu_338_p3;
wire   [0:0] icmp_ln574_fu_318_p2;
wire   [15:0] trunc_ln575_fu_334_p1;
wire   [15:0] select_ln577_fu_346_p3;
wire   [7:0] tmp_9_fu_362_p4;
wire   [15:0] trunc_ln572_fu_314_p1;
wire   [15:0] sext_ln570cast_fu_378_p1;
wire   [0:0] icmp_ln592_fu_372_p2;
wire   [15:0] shl_ln593_fu_382_p2;
wire   [0:0] icmp_ln560_fu_266_p2;
wire   [0:0] icmp_ln571_fu_308_p2;
wire   [0:0] xor_ln560_fu_396_p2;
wire   [0:0] and_ln571_fu_402_p2;
wire   [15:0] select_ln592_fu_388_p3;
wire   [0:0] or_ln571_fu_416_p2;
wire   [0:0] xor_ln571_fu_422_p2;
wire   [0:0] and_ln570_fu_428_p2;
wire   [15:0] select_ln574_fu_354_p3;
wire   [15:0] select_ln571_fu_408_p3;
wire   [15:0] select_ln570_fu_434_p3;
wire   [63:0] ireg_2_fu_451_p1;
wire   [10:0] exp_tmp_2_fu_466_p4;
wire   [51:0] trunc_ln554_2_fu_480_p1;
wire   [52:0] p_Result_6_fu_484_p3;
wire   [53:0] zext_ln558_2_fu_492_p1;
wire   [0:0] p_Result_5_fu_458_p3;
wire   [53:0] man_V_9_fu_496_p2;
wire   [62:0] trunc_ln544_2_fu_454_p1;
wire   [11:0] zext_ln455_2_fu_476_p1;
wire   [11:0] F2_2_fu_516_p2;
wire   [0:0] icmp_ln570_2_fu_522_p2;
wire   [11:0] add_ln570_2_fu_528_p2;
wire   [11:0] sub_ln570_2_fu_534_p2;
wire  signed [11:0] sh_amt_2_fu_540_p3;
wire   [53:0] man_V_10_fu_502_p3;
wire  signed [31:0] sext_ln570_2_fu_548_p1;
wire   [53:0] zext_ln575_2_fu_568_p1;
wire   [53:0] ashr_ln575_2_fu_572_p2;
wire   [0:0] tmp_11_fu_582_p3;
wire   [0:0] icmp_ln574_2_fu_562_p2;
wire   [15:0] trunc_ln575_2_fu_578_p1;
wire   [15:0] select_ln577_2_fu_590_p3;
wire   [7:0] tmp_12_fu_606_p4;
wire   [15:0] trunc_ln572_2_fu_558_p1;
wire   [15:0] sext_ln570_2cast_fu_622_p1;
wire   [0:0] icmp_ln592_2_fu_616_p2;
wire   [15:0] shl_ln593_2_fu_626_p2;
wire   [0:0] icmp_ln560_2_fu_510_p2;
wire   [0:0] icmp_ln571_2_fu_552_p2;
wire   [0:0] xor_ln560_2_fu_640_p2;
wire   [0:0] and_ln571_2_fu_646_p2;
wire   [15:0] select_ln592_2_fu_632_p3;
wire   [0:0] or_ln571_2_fu_660_p2;
wire   [0:0] xor_ln571_2_fu_666_p2;
wire   [0:0] and_ln570_2_fu_672_p2;
wire   [15:0] select_ln574_2_fu_598_p3;
wire   [15:0] select_ln571_2_fu_652_p3;
wire   [15:0] select_ln570_4_fu_678_p3;
reg    grp_fu_151_ce;
reg    grp_fu_156_ce;
reg    grp_fu_161_ce;
reg    grp_fu_164_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to21;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
end

top_tx_qam64_mapping_ROM_AUTO_1R #(
    .DataWidth( 4 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
mapping_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mapping_address0),
    .ce0(mapping_ce0),
    .q0(mapping_q0),
    .address1(mapping_address1),
    .ce1(mapping_ce1),
    .q1(mapping_q1)
);

top_tx_ddiv_64ns_64ns_64_17_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 17 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_17_no_dsp_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_reg_715),
    .din1(64'd4618982683775996516),
    .ce(grp_fu_151_ce),
    .dout(grp_fu_151_p2)
);

top_tx_ddiv_64ns_64ns_64_17_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 17 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_17_no_dsp_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv1_reg_720),
    .din1(64'd4618982683775996516),
    .ce(grp_fu_156_ce),
    .dout(grp_fu_156_p2)
);

top_tx_sitodp_32s_64_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32s_64_4_no_dsp_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_161_p0),
    .ce(grp_fu_161_ce),
    .dout(grp_fu_161_p1)
);

top_tx_sitodp_32s_64_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32s_64_4_no_dsp_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_164_p0),
    .ce(grp_fu_164_ce),
    .dout(grp_fu_164_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv1_reg_720 <= grp_fu_164_p1;
        conv_reg_715 <= grp_fu_161_p1;
        d_2_reg_730 <= grp_fu_156_p2;
        d_reg_725 <= grp_fu_151_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to21 = 1'b1;
    end else begin
        ap_idle_pp0_0to21 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to21 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_151_ce = 1'b1;
    end else begin
        grp_fu_151_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_156_ce = 1'b1;
    end else begin
        grp_fu_156_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_161_ce = 1'b1;
    end else begin
        grp_fu_161_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_164_ce = 1'b1;
    end else begin
        grp_fu_164_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mapping_ce0 = 1'b1;
    end else begin
        mapping_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mapping_ce1 = 1'b1;
    end else begin
        mapping_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        temp1_im398_blk_n = temp1_im398_full_n;
    end else begin
        temp1_im398_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp1_im398_write = 1'b1;
    end else begin
        temp1_im398_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        temp1_re397_blk_n = temp1_re397_full_n;
    end else begin
        temp1_re397_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        temp1_re397_write = 1'b1;
    end else begin
        temp1_re397_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_2_fu_516_p2 = (12'd1075 - zext_ln455_2_fu_476_p1);

assign F2_fu_272_p2 = (12'd1075 - zext_ln455_fu_232_p1);

assign add_ln570_2_fu_528_p2 = ($signed(F2_2_fu_516_p2) + $signed(12'd4082));

assign add_ln570_fu_284_p2 = ($signed(F2_fu_272_p2) + $signed(12'd4082));

assign and_ln570_2_fu_672_p2 = (xor_ln571_2_fu_666_p2 & icmp_ln570_2_fu_522_p2);

assign and_ln570_fu_428_p2 = (xor_ln571_fu_422_p2 & icmp_ln570_fu_278_p2);

assign and_ln571_2_fu_646_p2 = (xor_ln560_2_fu_640_p2 & icmp_ln571_2_fu_552_p2);

assign and_ln571_fu_402_p2 = (xor_ln560_fu_396_p2 & icmp_ln571_fu_308_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter22 == 1'b1) & ((temp1_im398_full_n == 1'b0) | (temp1_re397_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter22 == 1'b1) & ((temp1_im398_full_n == 1'b0) | (temp1_re397_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_enable_reg_pp0_iter22 == 1'b1) & ((temp1_im398_full_n == 1'b0) | (temp1_re397_full_n == 1'b0))));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_pp0_stage0_iter22 = ((temp1_im398_full_n == 1'b0) | (temp1_re397_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ashr_ln575_2_fu_572_p2 = $signed(man_V_10_fu_502_p3) >>> zext_ln575_2_fu_568_p1;

assign ashr_ln575_fu_328_p2 = $signed(man_V_7_fu_258_p3) >>> zext_ln575_fu_324_p1;

assign exp_tmp_2_fu_466_p4 = {{ireg_2_fu_451_p1[62:52]}};

assign exp_tmp_fu_222_p4 = {{ireg_fu_207_p1[62:52]}};

assign grp_fu_161_p0 = $signed(mapping_q1);

assign grp_fu_164_p0 = $signed(mapping_q0);

assign icmp_ln560_2_fu_510_p2 = ((trunc_ln544_2_fu_454_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln560_fu_266_p2 = ((trunc_ln544_fu_210_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln570_2_fu_522_p2 = (($signed(F2_2_fu_516_p2) > $signed(12'd14)) ? 1'b1 : 1'b0);

assign icmp_ln570_fu_278_p2 = (($signed(F2_fu_272_p2) > $signed(12'd14)) ? 1'b1 : 1'b0);

assign icmp_ln571_2_fu_552_p2 = ((F2_2_fu_516_p2 == 12'd14) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_308_p2 = ((F2_fu_272_p2 == 12'd14) ? 1'b1 : 1'b0);

assign icmp_ln574_2_fu_562_p2 = ((sh_amt_2_fu_540_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln574_fu_318_p2 = ((sh_amt_fu_296_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln592_2_fu_616_p2 = ((tmp_12_fu_606_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln592_fu_372_p2 = ((tmp_9_fu_362_p4 == 8'd0) ? 1'b1 : 1'b0);

assign index_i_fu_167_p4 = {{{input1}, {input2}}, {input3}};

assign index_q_fu_177_p4 = {{{input4}, {input5}}, {input6}};

assign ireg_2_fu_451_p1 = d_2_reg_730;

assign ireg_fu_207_p1 = d_reg_725;

assign man_V_10_fu_502_p3 = ((p_Result_5_fu_458_p3[0:0] == 1'b1) ? man_V_9_fu_496_p2 : zext_ln558_2_fu_492_p1);

assign man_V_6_fu_252_p2 = (54'd0 - zext_ln558_fu_248_p1);

assign man_V_7_fu_258_p3 = ((p_Result_s_fu_214_p3[0:0] == 1'b1) ? man_V_6_fu_252_p2 : zext_ln558_fu_248_p1);

assign man_V_9_fu_496_p2 = (54'd0 - zext_ln558_2_fu_492_p1);

assign mapping_address0 = zext_ln71_fu_192_p1;

assign mapping_address1 = zext_ln70_fu_187_p1;

assign or_ln571_2_fu_660_p2 = (icmp_ln571_2_fu_552_p2 | icmp_ln560_2_fu_510_p2);

assign or_ln571_fu_416_p2 = (icmp_ln571_fu_308_p2 | icmp_ln560_fu_266_p2);

assign p_Result_4_fu_240_p3 = {{1'd1}, {trunc_ln554_fu_236_p1}};

assign p_Result_5_fu_458_p3 = ireg_2_fu_451_p1[32'd63];

assign p_Result_6_fu_484_p3 = {{1'd1}, {trunc_ln554_2_fu_480_p1}};

assign p_Result_s_fu_214_p3 = ireg_fu_207_p1[32'd63];

assign select_ln570_4_fu_678_p3 = ((and_ln570_2_fu_672_p2[0:0] == 1'b1) ? select_ln574_2_fu_598_p3 : select_ln571_2_fu_652_p3);

assign select_ln570_fu_434_p3 = ((and_ln570_fu_428_p2[0:0] == 1'b1) ? select_ln574_fu_354_p3 : select_ln571_fu_408_p3);

assign select_ln571_2_fu_652_p3 = ((and_ln571_2_fu_646_p2[0:0] == 1'b1) ? trunc_ln572_2_fu_558_p1 : select_ln592_2_fu_632_p3);

assign select_ln571_fu_408_p3 = ((and_ln571_fu_402_p2[0:0] == 1'b1) ? trunc_ln572_fu_314_p1 : select_ln592_fu_388_p3);

assign select_ln574_2_fu_598_p3 = ((icmp_ln574_2_fu_562_p2[0:0] == 1'b1) ? trunc_ln575_2_fu_578_p1 : select_ln577_2_fu_590_p3);

assign select_ln574_fu_354_p3 = ((icmp_ln574_fu_318_p2[0:0] == 1'b1) ? trunc_ln575_fu_334_p1 : select_ln577_fu_346_p3);

assign select_ln577_2_fu_590_p3 = ((tmp_11_fu_582_p3[0:0] == 1'b1) ? 16'd65535 : 16'd0);

assign select_ln577_fu_346_p3 = ((tmp_fu_338_p3[0:0] == 1'b1) ? 16'd65535 : 16'd0);

assign select_ln592_2_fu_632_p3 = ((icmp_ln592_2_fu_616_p2[0:0] == 1'b1) ? shl_ln593_2_fu_626_p2 : 16'd0);

assign select_ln592_fu_388_p3 = ((icmp_ln592_fu_372_p2[0:0] == 1'b1) ? shl_ln593_fu_382_p2 : 16'd0);

assign sext_ln570_2_fu_548_p1 = sh_amt_2_fu_540_p3;

assign sext_ln570_2cast_fu_622_p1 = sext_ln570_2_fu_548_p1[15:0];

assign sext_ln570_fu_304_p1 = sh_amt_fu_296_p3;

assign sext_ln570cast_fu_378_p1 = sext_ln570_fu_304_p1[15:0];

assign sh_amt_2_fu_540_p3 = ((icmp_ln570_2_fu_522_p2[0:0] == 1'b1) ? add_ln570_2_fu_528_p2 : sub_ln570_2_fu_534_p2);

assign sh_amt_fu_296_p3 = ((icmp_ln570_fu_278_p2[0:0] == 1'b1) ? add_ln570_fu_284_p2 : sub_ln570_fu_290_p2);

assign shl_ln593_2_fu_626_p2 = trunc_ln572_2_fu_558_p1 << sext_ln570_2cast_fu_622_p1;

assign shl_ln593_fu_382_p2 = trunc_ln572_fu_314_p1 << sext_ln570cast_fu_378_p1;

assign sub_ln570_2_fu_534_p2 = (12'd14 - F2_2_fu_516_p2);

assign sub_ln570_fu_290_p2 = (12'd14 - F2_fu_272_p2);

assign temp1_im398_din = ((icmp_ln560_2_fu_510_p2[0:0] == 1'b1) ? 16'd0 : select_ln570_4_fu_678_p3);

assign temp1_re397_din = ((icmp_ln560_fu_266_p2[0:0] == 1'b1) ? 16'd0 : select_ln570_fu_434_p3);

assign tmp_11_fu_582_p3 = ireg_2_fu_451_p1[32'd63];

assign tmp_12_fu_606_p4 = {{sh_amt_2_fu_540_p3[11:4]}};

assign tmp_9_fu_362_p4 = {{sh_amt_fu_296_p3[11:4]}};

assign tmp_fu_338_p3 = ireg_fu_207_p1[32'd63];

assign trunc_ln544_2_fu_454_p1 = ireg_2_fu_451_p1[62:0];

assign trunc_ln544_fu_210_p1 = ireg_fu_207_p1[62:0];

assign trunc_ln554_2_fu_480_p1 = ireg_2_fu_451_p1[51:0];

assign trunc_ln554_fu_236_p1 = ireg_fu_207_p1[51:0];

assign trunc_ln572_2_fu_558_p1 = man_V_10_fu_502_p3[15:0];

assign trunc_ln572_fu_314_p1 = man_V_7_fu_258_p3[15:0];

assign trunc_ln575_2_fu_578_p1 = ashr_ln575_2_fu_572_p2[15:0];

assign trunc_ln575_fu_334_p1 = ashr_ln575_fu_328_p2[15:0];

assign xor_ln560_2_fu_640_p2 = (icmp_ln560_2_fu_510_p2 ^ 1'd1);

assign xor_ln560_fu_396_p2 = (icmp_ln560_fu_266_p2 ^ 1'd1);

assign xor_ln571_2_fu_666_p2 = (or_ln571_2_fu_660_p2 ^ 1'd1);

assign xor_ln571_fu_422_p2 = (or_ln571_fu_416_p2 ^ 1'd1);

assign zext_ln455_2_fu_476_p1 = exp_tmp_2_fu_466_p4;

assign zext_ln455_fu_232_p1 = exp_tmp_fu_222_p4;

assign zext_ln558_2_fu_492_p1 = p_Result_6_fu_484_p3;

assign zext_ln558_fu_248_p1 = p_Result_4_fu_240_p3;

assign zext_ln575_2_fu_568_p1 = $unsigned(sext_ln570_2_fu_548_p1);

assign zext_ln575_fu_324_p1 = $unsigned(sext_ln570_fu_304_p1);

assign zext_ln70_fu_187_p1 = index_i_fu_167_p4;

assign zext_ln71_fu_192_p1 = index_q_fu_177_p4;

endmodule //top_tx_qam64
