// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_tx_top_tx_Pipeline_loop_input (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        temp5_M_real_V_address0,
        temp5_M_real_V_ce0,
        temp5_M_real_V_q0,
        temp5_M_real_V_address1,
        temp5_M_real_V_ce1,
        temp5_M_real_V_q1,
        temp5_M_real_V_address2,
        temp5_M_real_V_ce2,
        temp5_M_real_V_q2,
        temp5_M_imag_V_address0,
        temp5_M_imag_V_ce0,
        temp5_M_imag_V_q0,
        temp5_M_imag_V_address1,
        temp5_M_imag_V_ce1,
        temp5_M_imag_V_q1,
        temp5_M_imag_V_address2,
        temp5_M_imag_V_ce2,
        temp5_M_imag_V_q2,
        temp3_M_real_V_address0,
        temp3_M_real_V_ce0,
        temp3_M_real_V_we0,
        temp3_M_real_V_d0,
        temp3_M_imag_V_address0,
        temp3_M_imag_V_ce0,
        temp3_M_imag_V_we0,
        temp3_M_imag_V_d0,
        temp4_M_real_V_address0,
        temp4_M_real_V_ce0,
        temp4_M_real_V_we0,
        temp4_M_real_V_d0,
        temp4_M_imag_V_address0,
        temp4_M_imag_V_ce0,
        temp4_M_imag_V_we0,
        temp4_M_imag_V_d0,
        temp6_M_real_V_address0,
        temp6_M_real_V_ce0,
        temp6_M_real_V_we0,
        temp6_M_real_V_d0,
        temp6_M_imag_V_address0,
        temp6_M_imag_V_ce0,
        temp6_M_imag_V_we0,
        temp6_M_imag_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] temp5_M_real_V_address0;
output   temp5_M_real_V_ce0;
input  [15:0] temp5_M_real_V_q0;
output  [11:0] temp5_M_real_V_address1;
output   temp5_M_real_V_ce1;
input  [15:0] temp5_M_real_V_q1;
output  [11:0] temp5_M_real_V_address2;
output   temp5_M_real_V_ce2;
input  [15:0] temp5_M_real_V_q2;
output  [11:0] temp5_M_imag_V_address0;
output   temp5_M_imag_V_ce0;
input  [15:0] temp5_M_imag_V_q0;
output  [11:0] temp5_M_imag_V_address1;
output   temp5_M_imag_V_ce1;
input  [15:0] temp5_M_imag_V_q1;
output  [11:0] temp5_M_imag_V_address2;
output   temp5_M_imag_V_ce2;
input  [15:0] temp5_M_imag_V_q2;
output  [9:0] temp3_M_real_V_address0;
output   temp3_M_real_V_ce0;
output   temp3_M_real_V_we0;
output  [15:0] temp3_M_real_V_d0;
output  [9:0] temp3_M_imag_V_address0;
output   temp3_M_imag_V_ce0;
output   temp3_M_imag_V_we0;
output  [15:0] temp3_M_imag_V_d0;
output  [9:0] temp4_M_real_V_address0;
output   temp4_M_real_V_ce0;
output   temp4_M_real_V_we0;
output  [15:0] temp4_M_real_V_d0;
output  [9:0] temp4_M_imag_V_address0;
output   temp4_M_imag_V_ce0;
output   temp4_M_imag_V_we0;
output  [15:0] temp4_M_imag_V_d0;
output  [9:0] temp6_M_real_V_address0;
output   temp6_M_real_V_ce0;
output   temp6_M_real_V_we0;
output  [15:0] temp6_M_real_V_d0;
output  [9:0] temp6_M_imag_V_address0;
output   temp6_M_imag_V_ce0;
output   temp6_M_imag_V_we0;
output  [15:0] temp6_M_imag_V_d0;

reg ap_idle;
reg temp5_M_real_V_ce0;
reg temp5_M_real_V_ce1;
reg temp5_M_real_V_ce2;
reg temp5_M_imag_V_ce0;
reg temp5_M_imag_V_ce1;
reg temp5_M_imag_V_ce2;
reg temp3_M_real_V_ce0;
reg temp3_M_real_V_we0;
reg temp3_M_imag_V_ce0;
reg temp3_M_imag_V_we0;
reg temp4_M_real_V_ce0;
reg temp4_M_real_V_we0;
reg temp4_M_imag_V_ce0;
reg temp4_M_imag_V_we0;
reg temp6_M_real_V_ce0;
reg temp6_M_real_V_we0;
reg temp6_M_imag_V_ce0;
reg temp6_M_imag_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln71_fu_222_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] i_1_cast3_fu_234_p1;
reg   [63:0] i_1_cast3_reg_327;
wire    ap_block_pp0_stage0_11001;
wire   [9:0] empty_45_fu_244_p1;
reg   [9:0] empty_45_reg_333;
wire   [0:0] icmp_ln73_fu_258_p2;
reg   [0:0] icmp_ln73_reg_339;
wire   [0:0] or_ln80_fu_288_p2;
reg   [0:0] or_ln80_reg_353;
reg   [0:0] tmp_4_reg_367;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln82_fu_307_p1;
wire   [63:0] zext_ln86_fu_312_p1;
reg   [11:0] i_1_fu_52;
wire   [11:0] add_ln71_fu_228_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_i;
wire   [1:0] tmp_fu_248_p4;
wire   [1:0] tmp_2_fu_264_p4;
wire   [0:0] tmp_3_fu_280_p3;
wire   [0:0] icmp_ln80_fu_274_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_tx_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln71_fu_222_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_52 <= add_ln71_fu_228_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_52 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln71_fu_222_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_45_reg_333 <= empty_45_fu_244_p1;
        i_1_cast3_reg_327[11 : 0] <= i_1_cast3_fu_234_p1[11 : 0];
        icmp_ln73_reg_339 <= icmp_ln73_fu_258_p2;
        or_ln80_reg_353 <= or_ln80_fu_288_p2;
        tmp_4_reg_367 <= ap_sig_allocacmp_i[32'd11];
    end
end

always @ (*) begin
    if (((icmp_ln71_fu_222_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 12'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp3_M_imag_V_ce0 = 1'b1;
    end else begin
        temp3_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln73_reg_339 == 1'd1))) begin
        temp3_M_imag_V_we0 = 1'b1;
    end else begin
        temp3_M_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp3_M_real_V_ce0 = 1'b1;
    end else begin
        temp3_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln73_reg_339 == 1'd1))) begin
        temp3_M_real_V_we0 = 1'b1;
    end else begin
        temp3_M_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp4_M_imag_V_ce0 = 1'b1;
    end else begin
        temp4_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln80_reg_353 == 1'd0))) begin
        temp4_M_imag_V_we0 = 1'b1;
    end else begin
        temp4_M_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp4_M_real_V_ce0 = 1'b1;
    end else begin
        temp4_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln80_reg_353 == 1'd0))) begin
        temp4_M_real_V_we0 = 1'b1;
    end else begin
        temp4_M_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp5_M_imag_V_ce0 = 1'b1;
    end else begin
        temp5_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp5_M_imag_V_ce1 = 1'b1;
    end else begin
        temp5_M_imag_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp5_M_imag_V_ce2 = 1'b1;
    end else begin
        temp5_M_imag_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp5_M_real_V_ce0 = 1'b1;
    end else begin
        temp5_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp5_M_real_V_ce1 = 1'b1;
    end else begin
        temp5_M_real_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp5_M_real_V_ce2 = 1'b1;
    end else begin
        temp5_M_real_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp6_M_imag_V_ce0 = 1'b1;
    end else begin
        temp6_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_4_reg_367 == 1'd1))) begin
        temp6_M_imag_V_we0 = 1'b1;
    end else begin
        temp6_M_imag_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp6_M_real_V_ce0 = 1'b1;
    end else begin
        temp6_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_4_reg_367 == 1'd1))) begin
        temp6_M_real_V_we0 = 1'b1;
    end else begin
        temp6_M_real_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln71_fu_228_p2 = (ap_sig_allocacmp_i + 12'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_45_fu_244_p1 = ap_sig_allocacmp_i[9:0];

assign i_1_cast3_fu_234_p1 = ap_sig_allocacmp_i;

assign icmp_ln71_fu_222_p2 = ((ap_sig_allocacmp_i == 12'd3072) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_258_p2 = ((tmp_fu_248_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_274_p2 = ((tmp_2_fu_264_p4 == 2'd0) ? 1'b1 : 1'b0);

assign or_ln80_fu_288_p2 = (tmp_3_fu_280_p3 | icmp_ln80_fu_274_p2);

assign temp3_M_imag_V_address0 = i_1_cast3_reg_327;

assign temp3_M_imag_V_d0 = temp5_M_imag_V_q2;

assign temp3_M_real_V_address0 = i_1_cast3_reg_327;

assign temp3_M_real_V_d0 = temp5_M_real_V_q2;

assign temp4_M_imag_V_address0 = zext_ln82_fu_307_p1;

assign temp4_M_imag_V_d0 = temp5_M_imag_V_q1;

assign temp4_M_real_V_address0 = zext_ln82_fu_307_p1;

assign temp4_M_real_V_d0 = temp5_M_real_V_q1;

assign temp5_M_imag_V_address0 = i_1_cast3_fu_234_p1;

assign temp5_M_imag_V_address1 = i_1_cast3_fu_234_p1;

assign temp5_M_imag_V_address2 = i_1_cast3_fu_234_p1;

assign temp5_M_real_V_address0 = i_1_cast3_fu_234_p1;

assign temp5_M_real_V_address1 = i_1_cast3_fu_234_p1;

assign temp5_M_real_V_address2 = i_1_cast3_fu_234_p1;

assign temp6_M_imag_V_address0 = zext_ln86_fu_312_p1;

assign temp6_M_imag_V_d0 = temp5_M_imag_V_q0;

assign temp6_M_real_V_address0 = zext_ln86_fu_312_p1;

assign temp6_M_real_V_d0 = temp5_M_real_V_q0;

assign tmp_2_fu_264_p4 = {{ap_sig_allocacmp_i[11:10]}};

assign tmp_3_fu_280_p3 = ap_sig_allocacmp_i[32'd11];

assign tmp_fu_248_p4 = {{ap_sig_allocacmp_i[11:10]}};

assign zext_ln82_fu_307_p1 = empty_45_reg_333;

assign zext_ln86_fu_312_p1 = empty_45_reg_333;

always @ (posedge ap_clk) begin
    i_1_cast3_reg_327[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //top_tx_top_tx_Pipeline_loop_input
