// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_tx_top_tx_Pipeline_loop_output (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cp_out_re_V_address0,
        cp_out_re_V_ce0,
        cp_out_re_V_we0,
        cp_out_re_V_d0,
        cp_out_re_V_address1,
        cp_out_re_V_ce1,
        cp_out_re_V_we1,
        cp_out_re_V_d1,
        tem_out1_M_real_address0,
        tem_out1_M_real_ce0,
        tem_out1_M_real_q0,
        tem_out1_M_imag_address0,
        tem_out1_M_imag_ce0,
        tem_out1_M_imag_q0,
        cp_out_im_V_address0,
        cp_out_im_V_ce0,
        cp_out_im_V_we0,
        cp_out_im_V_d0,
        cp_out_im_V_address1,
        cp_out_im_V_ce1,
        cp_out_im_V_we1,
        cp_out_im_V_d1,
        cp_out_re_V_1_address0,
        cp_out_re_V_1_ce0,
        cp_out_re_V_1_we0,
        cp_out_re_V_1_d0,
        cp_out_re_V_1_address1,
        cp_out_re_V_1_ce1,
        cp_out_re_V_1_we1,
        cp_out_re_V_1_d1,
        tem_out2_M_real_address0,
        tem_out2_M_real_ce0,
        tem_out2_M_real_q0,
        tem_out2_M_imag_address0,
        tem_out2_M_imag_ce0,
        tem_out2_M_imag_q0,
        cp_out_im_V_1_address0,
        cp_out_im_V_1_ce0,
        cp_out_im_V_1_we0,
        cp_out_im_V_1_d0,
        cp_out_im_V_1_address1,
        cp_out_im_V_1_ce1,
        cp_out_im_V_1_we1,
        cp_out_im_V_1_d1,
        cp_out_re_V_2_address0,
        cp_out_re_V_2_ce0,
        cp_out_re_V_2_we0,
        cp_out_re_V_2_d0,
        cp_out_re_V_2_address1,
        cp_out_re_V_2_ce1,
        cp_out_re_V_2_we1,
        cp_out_re_V_2_d1,
        tem_out3_M_real_address0,
        tem_out3_M_real_ce0,
        tem_out3_M_real_q0,
        tem_out3_M_imag_address0,
        tem_out3_M_imag_ce0,
        tem_out3_M_imag_q0,
        cp_out_im_V_2_address0,
        cp_out_im_V_2_ce0,
        cp_out_im_V_2_we0,
        cp_out_im_V_2_d0,
        cp_out_im_V_2_address1,
        cp_out_im_V_2_ce1,
        cp_out_im_V_2_we1,
        cp_out_im_V_2_d1,
        cp_out_re_V_4_address0,
        cp_out_re_V_4_ce0,
        cp_out_re_V_4_we0,
        cp_out_re_V_4_d0,
        cp_out_re_V_5_address0,
        cp_out_re_V_5_ce0,
        cp_out_re_V_5_we0,
        cp_out_re_V_5_d0,
        cp_out_re_V_6_address0,
        cp_out_re_V_6_ce0,
        cp_out_re_V_6_we0,
        cp_out_re_V_6_d0,
        cp_out_im_V_4_address0,
        cp_out_im_V_4_ce0,
        cp_out_im_V_4_we0,
        cp_out_im_V_4_d0,
        cp_out_im_V_5_address0,
        cp_out_im_V_5_ce0,
        cp_out_im_V_5_we0,
        cp_out_im_V_5_d0,
        cp_out_im_V_6_address0,
        cp_out_im_V_6_ce0,
        cp_out_im_V_6_we0,
        cp_out_im_V_6_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] cp_out_re_V_address0;
output   cp_out_re_V_ce0;
output   cp_out_re_V_we0;
output  [15:0] cp_out_re_V_d0;
output  [10:0] cp_out_re_V_address1;
output   cp_out_re_V_ce1;
output   cp_out_re_V_we1;
output  [15:0] cp_out_re_V_d1;
output  [10:0] tem_out1_M_real_address0;
output   tem_out1_M_real_ce0;
input  [15:0] tem_out1_M_real_q0;
output  [10:0] tem_out1_M_imag_address0;
output   tem_out1_M_imag_ce0;
input  [15:0] tem_out1_M_imag_q0;
output  [10:0] cp_out_im_V_address0;
output   cp_out_im_V_ce0;
output   cp_out_im_V_we0;
output  [15:0] cp_out_im_V_d0;
output  [10:0] cp_out_im_V_address1;
output   cp_out_im_V_ce1;
output   cp_out_im_V_we1;
output  [15:0] cp_out_im_V_d1;
output  [10:0] cp_out_re_V_1_address0;
output   cp_out_re_V_1_ce0;
output   cp_out_re_V_1_we0;
output  [15:0] cp_out_re_V_1_d0;
output  [10:0] cp_out_re_V_1_address1;
output   cp_out_re_V_1_ce1;
output   cp_out_re_V_1_we1;
output  [15:0] cp_out_re_V_1_d1;
output  [10:0] tem_out2_M_real_address0;
output   tem_out2_M_real_ce0;
input  [15:0] tem_out2_M_real_q0;
output  [10:0] tem_out2_M_imag_address0;
output   tem_out2_M_imag_ce0;
input  [15:0] tem_out2_M_imag_q0;
output  [10:0] cp_out_im_V_1_address0;
output   cp_out_im_V_1_ce0;
output   cp_out_im_V_1_we0;
output  [15:0] cp_out_im_V_1_d0;
output  [10:0] cp_out_im_V_1_address1;
output   cp_out_im_V_1_ce1;
output   cp_out_im_V_1_we1;
output  [15:0] cp_out_im_V_1_d1;
output  [10:0] cp_out_re_V_2_address0;
output   cp_out_re_V_2_ce0;
output   cp_out_re_V_2_we0;
output  [15:0] cp_out_re_V_2_d0;
output  [10:0] cp_out_re_V_2_address1;
output   cp_out_re_V_2_ce1;
output   cp_out_re_V_2_we1;
output  [15:0] cp_out_re_V_2_d1;
output  [10:0] tem_out3_M_real_address0;
output   tem_out3_M_real_ce0;
input  [15:0] tem_out3_M_real_q0;
output  [10:0] tem_out3_M_imag_address0;
output   tem_out3_M_imag_ce0;
input  [15:0] tem_out3_M_imag_q0;
output  [10:0] cp_out_im_V_2_address0;
output   cp_out_im_V_2_ce0;
output   cp_out_im_V_2_we0;
output  [15:0] cp_out_im_V_2_d0;
output  [10:0] cp_out_im_V_2_address1;
output   cp_out_im_V_2_ce1;
output   cp_out_im_V_2_we1;
output  [15:0] cp_out_im_V_2_d1;
output  [10:0] cp_out_re_V_4_address0;
output   cp_out_re_V_4_ce0;
output   cp_out_re_V_4_we0;
output  [0:0] cp_out_re_V_4_d0;
output  [10:0] cp_out_re_V_5_address0;
output   cp_out_re_V_5_ce0;
output   cp_out_re_V_5_we0;
output  [0:0] cp_out_re_V_5_d0;
output  [10:0] cp_out_re_V_6_address0;
output   cp_out_re_V_6_ce0;
output   cp_out_re_V_6_we0;
output  [0:0] cp_out_re_V_6_d0;
output  [10:0] cp_out_im_V_4_address0;
output   cp_out_im_V_4_ce0;
output   cp_out_im_V_4_we0;
output  [0:0] cp_out_im_V_4_d0;
output  [10:0] cp_out_im_V_5_address0;
output   cp_out_im_V_5_ce0;
output   cp_out_im_V_5_we0;
output  [0:0] cp_out_im_V_5_d0;
output  [10:0] cp_out_im_V_6_address0;
output   cp_out_im_V_6_ce0;
output   cp_out_im_V_6_we0;
output  [0:0] cp_out_im_V_6_d0;

reg ap_idle;
reg cp_out_re_V_ce0;
reg cp_out_re_V_we0;
reg cp_out_re_V_ce1;
reg cp_out_re_V_we1;
reg tem_out1_M_real_ce0;
reg tem_out1_M_imag_ce0;
reg cp_out_im_V_ce0;
reg cp_out_im_V_we0;
reg cp_out_im_V_ce1;
reg cp_out_im_V_we1;
reg cp_out_re_V_1_ce0;
reg cp_out_re_V_1_we0;
reg cp_out_re_V_1_ce1;
reg cp_out_re_V_1_we1;
reg tem_out2_M_real_ce0;
reg tem_out2_M_imag_ce0;
reg cp_out_im_V_1_ce0;
reg cp_out_im_V_1_we0;
reg cp_out_im_V_1_ce1;
reg cp_out_im_V_1_we1;
reg cp_out_re_V_2_ce0;
reg cp_out_re_V_2_we0;
reg cp_out_re_V_2_ce1;
reg cp_out_re_V_2_we1;
reg tem_out3_M_real_ce0;
reg tem_out3_M_imag_ce0;
reg cp_out_im_V_2_ce0;
reg cp_out_im_V_2_we0;
reg cp_out_im_V_2_ce1;
reg cp_out_im_V_2_we1;
reg cp_out_re_V_4_ce0;
reg cp_out_re_V_4_we0;
reg cp_out_re_V_5_ce0;
reg cp_out_re_V_5_we0;
reg cp_out_re_V_6_ce0;
reg cp_out_re_V_6_we0;
reg cp_out_im_V_4_ce0;
reg cp_out_im_V_4_we0;
reg cp_out_im_V_5_ce0;
reg cp_out_im_V_5_we0;
reg cp_out_im_V_6_ce0;
reg cp_out_im_V_6_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln112_fu_471_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] i_2_cast4_fu_483_p1;
reg   [63:0] i_2_cast4_reg_715;
wire   [0:0] icmp_ln114_fu_489_p2;
reg   [0:0] icmp_ln114_reg_721;
wire   [0:0] and_ln121_fu_507_p2;
reg   [0:0] and_ln121_reg_735;
wire   [10:0] select_ln125_fu_525_p3;
reg   [10:0] select_ln125_reg_739;
wire   [0:0] and_ln128_fu_545_p2;
reg   [0:0] and_ln128_reg_754;
wire   [0:0] icmp_ln135_fu_566_p2;
reg   [0:0] icmp_ln135_reg_768;
reg   [0:0] icmp_ln135_reg_768_pp0_iter2_reg;
wire   [63:0] zext_ln137_fu_581_p1;
reg   [63:0] zext_ln137_reg_772;
reg   [63:0] zext_ln137_reg_772_pp0_iter2_reg;
wire   [2:0] trunc_ln2_fu_591_p4;
reg   [2:0] trunc_ln2_reg_782;
reg   [2:0] trunc_ln2_reg_782_pp0_iter2_reg;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln125_fu_519_p1;
wire   [63:0] zext_ln132_fu_557_p1;
wire   [63:0] zext_ln125_1_fu_639_p1;
wire   [63:0] zext_ln132_1_fu_647_p1;
reg   [12:0] phi_urem3_fu_104;
wire   [12:0] select_ln112_fu_616_p3;
wire    ap_loop_init;
reg   [12:0] phi_urem_fu_108;
wire   [12:0] select_ln112_1_fu_668_p3;
reg   [26:0] phi_mul_fu_112;
wire   [26:0] add_ln135_fu_572_p2;
reg   [12:0] i_2_fu_116;
wire   [12:0] add_ln112_fu_477_p2;
wire   [0:0] icmp_ln121_fu_495_p2;
wire   [0:0] icmp_ln121_1_fu_501_p2;
wire   [10:0] empty_fu_467_p1;
wire   [10:0] add_ln125_fu_513_p2;
wire   [0:0] icmp_ln128_fu_533_p2;
wire   [0:0] icmp_ln128_1_fu_539_p2;
wire   [10:0] add_ln132_fu_551_p2;
wire   [12:0] add_ln112_1_fu_604_p2;
wire   [0:0] icmp_ln112_1_fu_610_p2;
wire   [12:0] add_ln112_2_fu_656_p2;
wire   [0:0] icmp_ln112_2_fu_662_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_tx_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_2_fu_116 <= 13'd0;
        end else if (((icmp_ln112_fu_471_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_2_fu_116 <= add_ln112_fu_477_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            phi_mul_fu_112 <= 27'd0;
        end else if (((icmp_ln112_fu_471_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            phi_mul_fu_112 <= add_ln135_fu_572_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            phi_urem3_fu_104 <= 13'd0;
        end else if (((icmp_ln112_fu_471_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            phi_urem3_fu_104 <= select_ln112_fu_616_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            phi_urem_fu_108 <= 13'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            phi_urem_fu_108 <= select_ln112_1_fu_668_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_fu_471_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln121_reg_735 <= and_ln121_fu_507_p2;
        and_ln128_reg_754 <= and_ln128_fu_545_p2;
        i_2_cast4_reg_715[12 : 0] <= i_2_cast4_fu_483_p1[12 : 0];
        icmp_ln114_reg_721 <= icmp_ln114_fu_489_p2;
        icmp_ln135_reg_768 <= icmp_ln135_fu_566_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln135_reg_768_pp0_iter2_reg <= icmp_ln135_reg_768;
        trunc_ln2_reg_782_pp0_iter2_reg <= trunc_ln2_reg_782;
        zext_ln137_reg_772_pp0_iter2_reg[12 : 0] <= zext_ln137_reg_772[12 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln121_fu_507_p2) & (icmp_ln112_fu_471_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln125_reg_739 <= select_ln125_fu_525_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_fu_471_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln135_fu_566_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln2_reg_782 <= {{phi_mul_fu_112[26:24]}};
        zext_ln137_reg_772[12 : 0] <= zext_ln137_fu_581_p1[12 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln112_fu_471_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cp_out_im_V_1_ce0 = 1'b1;
    end else begin
        cp_out_im_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cp_out_im_V_1_ce1 = 1'b1;
    end else begin
        cp_out_im_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln2_reg_782_pp0_iter2_reg == 3'd1) & (icmp_ln135_reg_768_pp0_iter2_reg == 1'd1))) begin
        cp_out_im_V_1_we0 = 1'b1;
    end else begin
        cp_out_im_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln121_reg_735) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cp_out_im_V_1_we1 = 1'b1;
    end else begin
        cp_out_im_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cp_out_im_V_2_ce0 = 1'b1;
    end else begin
        cp_out_im_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cp_out_im_V_2_ce1 = 1'b1;
    end else begin
        cp_out_im_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln2_reg_782_pp0_iter2_reg == 3'd2) & (icmp_ln135_reg_768_pp0_iter2_reg == 1'd1))) begin
        cp_out_im_V_2_we0 = 1'b1;
    end else begin
        cp_out_im_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln128_reg_754) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cp_out_im_V_2_we1 = 1'b1;
    end else begin
        cp_out_im_V_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cp_out_im_V_4_ce0 = 1'b1;
    end else begin
        cp_out_im_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln112_fu_471_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln2_fu_591_p4 == 3'd4) & (icmp_ln135_fu_566_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cp_out_im_V_4_we0 = 1'b1;
    end else begin
        cp_out_im_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cp_out_im_V_5_ce0 = 1'b1;
    end else begin
        cp_out_im_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln112_fu_471_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln2_fu_591_p4 == 3'd5) & (icmp_ln135_fu_566_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cp_out_im_V_5_we0 = 1'b1;
    end else begin
        cp_out_im_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cp_out_im_V_6_ce0 = 1'b1;
    end else begin
        cp_out_im_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (((icmp_ln112_fu_471_p2 == 1'd0) & (trunc_ln2_fu_591_p4 == 3'd6) & (icmp_ln135_fu_566_p2 == 1'd1)) | ((icmp_ln112_fu_471_p2 == 1'd0) & (trunc_ln2_fu_591_p4 == 3'd7) & (icmp_ln135_fu_566_p2 == 1'd1))))) begin
        cp_out_im_V_6_we0 = 1'b1;
    end else begin
        cp_out_im_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cp_out_im_V_ce0 = 1'b1;
    end else begin
        cp_out_im_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cp_out_im_V_ce1 = 1'b1;
    end else begin
        cp_out_im_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln2_reg_782_pp0_iter2_reg == 3'd0) & (icmp_ln135_reg_768_pp0_iter2_reg == 1'd1))) begin
        cp_out_im_V_we0 = 1'b1;
    end else begin
        cp_out_im_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln114_reg_721 == 1'd1))) begin
        cp_out_im_V_we1 = 1'b1;
    end else begin
        cp_out_im_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cp_out_re_V_1_ce0 = 1'b1;
    end else begin
        cp_out_re_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cp_out_re_V_1_ce1 = 1'b1;
    end else begin
        cp_out_re_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln2_reg_782_pp0_iter2_reg == 3'd1) & (icmp_ln135_reg_768_pp0_iter2_reg == 1'd1))) begin
        cp_out_re_V_1_we0 = 1'b1;
    end else begin
        cp_out_re_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln121_reg_735) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cp_out_re_V_1_we1 = 1'b1;
    end else begin
        cp_out_re_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cp_out_re_V_2_ce0 = 1'b1;
    end else begin
        cp_out_re_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cp_out_re_V_2_ce1 = 1'b1;
    end else begin
        cp_out_re_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln2_reg_782_pp0_iter2_reg == 3'd2) & (icmp_ln135_reg_768_pp0_iter2_reg == 1'd1))) begin
        cp_out_re_V_2_we0 = 1'b1;
    end else begin
        cp_out_re_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln128_reg_754) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cp_out_re_V_2_we1 = 1'b1;
    end else begin
        cp_out_re_V_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cp_out_re_V_4_ce0 = 1'b1;
    end else begin
        cp_out_re_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln112_fu_471_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln2_fu_591_p4 == 3'd4) & (icmp_ln135_fu_566_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cp_out_re_V_4_we0 = 1'b1;
    end else begin
        cp_out_re_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cp_out_re_V_5_ce0 = 1'b1;
    end else begin
        cp_out_re_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln112_fu_471_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln2_fu_591_p4 == 3'd5) & (icmp_ln135_fu_566_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cp_out_re_V_5_we0 = 1'b1;
    end else begin
        cp_out_re_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cp_out_re_V_6_ce0 = 1'b1;
    end else begin
        cp_out_re_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (((icmp_ln112_fu_471_p2 == 1'd0) & (trunc_ln2_fu_591_p4 == 3'd6) & (icmp_ln135_fu_566_p2 == 1'd1)) | ((icmp_ln112_fu_471_p2 == 1'd0) & (trunc_ln2_fu_591_p4 == 3'd7) & (icmp_ln135_fu_566_p2 == 1'd1))))) begin
        cp_out_re_V_6_we0 = 1'b1;
    end else begin
        cp_out_re_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        cp_out_re_V_ce0 = 1'b1;
    end else begin
        cp_out_re_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cp_out_re_V_ce1 = 1'b1;
    end else begin
        cp_out_re_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln2_reg_782_pp0_iter2_reg == 3'd0) & (icmp_ln135_reg_768_pp0_iter2_reg == 1'd1))) begin
        cp_out_re_V_we0 = 1'b1;
    end else begin
        cp_out_re_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln114_reg_721 == 1'd1))) begin
        cp_out_re_V_we1 = 1'b1;
    end else begin
        cp_out_re_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tem_out1_M_imag_ce0 = 1'b1;
    end else begin
        tem_out1_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tem_out1_M_real_ce0 = 1'b1;
    end else begin
        tem_out1_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tem_out2_M_imag_ce0 = 1'b1;
    end else begin
        tem_out2_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tem_out2_M_real_ce0 = 1'b1;
    end else begin
        tem_out2_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tem_out3_M_imag_ce0 = 1'b1;
    end else begin
        tem_out3_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tem_out3_M_real_ce0 = 1'b1;
    end else begin
        tem_out3_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln112_1_fu_604_p2 = (phi_urem3_fu_104 + 13'd1);

assign add_ln112_2_fu_656_p2 = (phi_urem_fu_108 + 13'd1);

assign add_ln112_fu_477_p2 = (i_2_fu_116 + 13'd1);

assign add_ln125_fu_513_p2 = (empty_fu_467_p1 + 11'd880);

assign add_ln132_fu_551_p2 = ($signed(empty_fu_467_p1) + $signed(11'd1760));

assign add_ln135_fu_572_p2 = (phi_mul_fu_112 + 27'd14365);

assign and_ln121_fu_507_p2 = (icmp_ln121_fu_495_p2 & icmp_ln121_1_fu_501_p2);

assign and_ln128_fu_545_p2 = (icmp_ln128_fu_533_p2 & icmp_ln128_1_fu_539_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign cp_out_im_V_1_address0 = zext_ln137_reg_772_pp0_iter2_reg;

assign cp_out_im_V_1_address1 = zext_ln125_1_fu_639_p1;

assign cp_out_im_V_1_d0 = 16'd0;

assign cp_out_im_V_1_d1 = tem_out2_M_imag_q0;

assign cp_out_im_V_2_address0 = zext_ln137_reg_772_pp0_iter2_reg;

assign cp_out_im_V_2_address1 = zext_ln132_1_fu_647_p1;

assign cp_out_im_V_2_d0 = 16'd0;

assign cp_out_im_V_2_d1 = tem_out3_M_imag_q0;

assign cp_out_im_V_4_address0 = zext_ln137_fu_581_p1;

assign cp_out_im_V_4_d0 = 1'd0;

assign cp_out_im_V_5_address0 = zext_ln137_fu_581_p1;

assign cp_out_im_V_5_d0 = 1'd0;

assign cp_out_im_V_6_address0 = zext_ln137_fu_581_p1;

assign cp_out_im_V_6_d0 = 1'd0;

assign cp_out_im_V_address0 = zext_ln137_reg_772_pp0_iter2_reg;

assign cp_out_im_V_address1 = i_2_cast4_reg_715;

assign cp_out_im_V_d0 = 16'd0;

assign cp_out_im_V_d1 = tem_out1_M_imag_q0;

assign cp_out_re_V_1_address0 = zext_ln137_reg_772_pp0_iter2_reg;

assign cp_out_re_V_1_address1 = zext_ln125_1_fu_639_p1;

assign cp_out_re_V_1_d0 = 16'd0;

assign cp_out_re_V_1_d1 = tem_out2_M_real_q0;

assign cp_out_re_V_2_address0 = zext_ln137_reg_772_pp0_iter2_reg;

assign cp_out_re_V_2_address1 = zext_ln132_1_fu_647_p1;

assign cp_out_re_V_2_d0 = 16'd0;

assign cp_out_re_V_2_d1 = tem_out3_M_real_q0;

assign cp_out_re_V_4_address0 = zext_ln137_fu_581_p1;

assign cp_out_re_V_4_d0 = 1'd0;

assign cp_out_re_V_5_address0 = zext_ln137_fu_581_p1;

assign cp_out_re_V_5_d0 = 1'd0;

assign cp_out_re_V_6_address0 = zext_ln137_fu_581_p1;

assign cp_out_re_V_6_d0 = 1'd0;

assign cp_out_re_V_address0 = zext_ln137_reg_772_pp0_iter2_reg;

assign cp_out_re_V_address1 = i_2_cast4_reg_715;

assign cp_out_re_V_d0 = 16'd0;

assign cp_out_re_V_d1 = tem_out1_M_real_q0;

assign empty_fu_467_p1 = i_2_fu_116[10:0];

assign i_2_cast4_fu_483_p1 = i_2_fu_116;

assign icmp_ln112_1_fu_610_p2 = ((add_ln112_1_fu_604_p2 < 13'd1168) ? 1'b1 : 1'b0);

assign icmp_ln112_2_fu_662_p2 = ((add_ln112_2_fu_656_p2 < 13'd1168) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_471_p2 = ((i_2_fu_116 == 13'd8176) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_489_p2 = ((i_2_fu_116 < 13'd1168) ? 1'b1 : 1'b0);

assign icmp_ln121_1_fu_501_p2 = ((i_2_fu_116 < 13'd2336) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_495_p2 = ((i_2_fu_116 > 13'd1167) ? 1'b1 : 1'b0);

assign icmp_ln128_1_fu_539_p2 = ((i_2_fu_116 < 13'd3504) ? 1'b1 : 1'b0);

assign icmp_ln128_fu_533_p2 = ((i_2_fu_116 > 13'd2335) ? 1'b1 : 1'b0);

assign icmp_ln135_fu_566_p2 = ((i_2_fu_116 > 13'd3503) ? 1'b1 : 1'b0);

assign select_ln112_1_fu_668_p3 = ((icmp_ln112_2_fu_662_p2[0:0] == 1'b1) ? add_ln112_2_fu_656_p2 : 13'd0);

assign select_ln112_fu_616_p3 = ((icmp_ln112_1_fu_610_p2[0:0] == 1'b1) ? add_ln112_1_fu_604_p2 : 13'd0);

assign select_ln125_fu_525_p3 = ((icmp_ln114_fu_489_p2[0:0] == 1'b1) ? empty_fu_467_p1 : add_ln125_fu_513_p2);

assign tem_out1_M_imag_address0 = i_2_cast4_fu_483_p1;

assign tem_out1_M_real_address0 = i_2_cast4_fu_483_p1;

assign tem_out2_M_imag_address0 = zext_ln125_fu_519_p1;

assign tem_out2_M_real_address0 = zext_ln125_fu_519_p1;

assign tem_out3_M_imag_address0 = zext_ln132_fu_557_p1;

assign tem_out3_M_real_address0 = zext_ln132_fu_557_p1;

assign trunc_ln2_fu_591_p4 = {{phi_mul_fu_112[26:24]}};

assign zext_ln125_1_fu_639_p1 = select_ln125_reg_739;

assign zext_ln125_fu_519_p1 = add_ln125_fu_513_p2;

assign zext_ln132_1_fu_647_p1 = phi_urem_fu_108;

assign zext_ln132_fu_557_p1 = add_ln132_fu_551_p2;

assign zext_ln137_fu_581_p1 = phi_urem3_fu_104;

always @ (posedge ap_clk) begin
    i_2_cast4_reg_715[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln137_reg_772[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    zext_ln137_reg_772_pp0_iter2_reg[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
end

endmodule //top_tx_top_tx_Pipeline_loop_output
